<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="1" name="pytest" skips="0" tests="8" time="4.559"><testcase classname="apps.accounts.test_views.TestPasswordResets" file="apps/accounts/test_views.py" line="252" name="test_password_reset" time="3.07780599594"></testcase><testcase classname="apps.accounts.test_views.TestPasswordResets" file="apps/accounts/test_views.py" line="276" name="test_password_reset_confirm_fail_invalid_token" time="0.030642747879"></testcase><testcase classname="apps.accounts.test_views.TestPasswordResets" file="apps/accounts/test_views.py" line="290" name="test_password_reset_confirm_fail_invalid_uid" time="0.0308051109314"></testcase><testcase classname="apps.accounts.test_views.TestPasswordResets" file="apps/accounts/test_views.py" line="304" name="test_password_reset_confirm_fail_passwords_not_the_same" time="0.0335521697998"></testcase><testcase classname="apps.accounts.test_views.TestPasswordResets" file="apps/accounts/test_views.py" line="318" name="test_password_reset_confirm_login" time="0.109690904617"><failure message="DoesNotExist: EmailAddress matching query does not exist.">self = &lt;backend.apps.accounts.test_views.TestPasswordResets testMethod=test_password_reset_confirm_login&gt;

    def test_password_reset_confirm_login(self):
        &quot;&quot;&quot; Tests password reset confirm works -&gt; can login afterwards. &quot;&quot;&quot;
        user = get_user_model().objects.create_user(&apos;admin&apos;, &apos;admin@email.com&apos;, &apos;password12&apos;)
        url_kwargs = self._generate_uid_and_token(user)
        data = {
            &apos;new_password1&apos;: &apos;new_password&apos;,
            &apos;new_password2&apos;: &apos;new_password&apos;,
            &apos;uid&apos;: url_kwargs[&apos;uid&apos;],
            &apos;token&apos;: url_kwargs[&apos;token&apos;]
        }
        response = self.client.post(self.rest_password_reset_confirm_url, data, format=&apos;json&apos;)
        self.assertEquals(response.status_code, status.HTTP_200_OK)
&gt;       response = self.client.post(self.login_url, {&apos;username&apos;: &apos;admin&apos;, &apos;password&apos;: &apos;new_password&apos;}, format=&apos;json&apos;)

apps/accounts/test_views.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python2.7/dist-packages/rest_framework/test.py:170: in post
    path, data=data, format=format, content_type=content_type, **extra)
/usr/local/lib/python2.7/dist-packages/rest_framework/test.py:92: in post
    return self.generic(&apos;POST&apos;, path, data, content_type, **extra)
/usr/local/lib/python2.7/dist-packages/django/test/client.py:379: in generic
    return self.request(**r)
/usr/local/lib/python2.7/dist-packages/rest_framework/test.py:159: in request
    return super(APIClient, self).request(**kwargs)
/usr/local/lib/python2.7/dist-packages/rest_framework/test.py:111: in request
    request = super(APIRequestFactory, self).request(**kwargs)
/usr/local/lib/python2.7/dist-packages/django/test/client.py:466: in request
    six.reraise(*exc_info)
/usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py:132: in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
/usr/local/lib/python2.7/dist-packages/django/views/decorators/csrf.py:58: in wrapped_view
    return view_func(*args, **kwargs)
/usr/local/lib/python2.7/dist-packages/django/views/generic/base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
/usr/local/lib/python2.7/dist-packages/rest_framework/views.py:466: in dispatch
    response = self.handle_exception(exc)
/usr/local/lib/python2.7/dist-packages/rest_framework/views.py:463: in dispatch
    response = handler(request, *args, **kwargs)
apps/accounts/views.py:60: in post
    if not self.serializer.is_valid():
/usr/local/lib/python2.7/dist-packages/rest_framework/serializers.py:213: in is_valid
    self._validated_data = self.run_validation(self.initial_data)
/usr/local/lib/python2.7/dist-packages/rest_framework/serializers.py:410: in run_validation
    value = self.validate(value)
apps/accounts/serializers.py:74: in validate
    email_address = user.emailaddress_set.get(email=user.email)
/usr/local/lib/python2.7/dist-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [], args = (), kwargs = {&apos;email&apos;: &apos;admin@email.com&apos;}, clone = [], num = 0

    def get(self, *args, **kwargs):
        &quot;&quot;&quot;
            Performs the query and returns a single object matching the given
            keyword arguments.
            &quot;&quot;&quot;
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter():
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                &quot;%s matching query does not exist.&quot; %
&gt;               self.model._meta.object_name
            )
E           DoesNotExist: EmailAddress matching query does not exist.

/usr/local/lib/python2.7/dist-packages/django/db/models/query.py:334: DoesNotExist</failure><system-out>jjfkhshkj admin new_password
admin
</system-out><system-err>#x1B[0m2016-03-15 21:09:28,739 #x1B[31m ERROR  #x1B[0m django.request #x1B[31mhandlers#x1B[0m base.py:256 :handle_uncaught_exception      #x1B[31mInternal Server Error: /accounts/login/#x1B[0m
</system-err></testcase><testcase classname="apps.accounts.test_views.TestPasswordResets" file="apps/accounts/test_views.py" line="333" name="test_password_reset_confirm_login_fails_with_old_password" time="0.103358983994"><system-out>jjfkhshkj admin password12
None
</system-out></testcase><testcase classname="apps.accounts.test_views.TestPasswordResets" file="../../usr/local/lib/python2.7/dist-packages/django/test/utils.py" line="192" name="test_password_reset_fail_no_user_with_email_no_notify_not_in_system" time="0.00380611419678"></testcase><testcase classname="apps.accounts.test_views.TestPasswordResets" file="../../usr/local/lib/python2.7/dist-packages/django/test/utils.py" line="192" name="test_password_reset_no_user_with_email_no_notify_not_in_system" time="0.00522208213806"></testcase></testsuite>